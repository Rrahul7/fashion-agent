generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  profile      Profile?
  reviews      Review[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Profile {
  id                 String            @id @default(cuid())
  userId             String            @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  skinTone           String?
  build              String?
  faceStructure      String?
  hairType           String?
  height             Float?
  weight             Float?
  otherMeasurements  Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@map("profiles")
}

model Review {
  id                    String            @id @default(cuid())
  userId                String?           // Optional for guest reviews
  user                  User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestSessionId        String?           // For guest users
  imageUrl              String
  imagePublicId         String?           // Cloudinary public ID for image management
  description           String?
  
  // Outfit Analysis with scores (0-100)
  styleCategory         String?
  styleCategoryScore    Int?
  fit                   String?
  fitScore              Int?
  colorHarmony          String?
  colorHarmonyScore     Int?
  occasionSuitability   String?
  occasionScore         Int?
  
  // Expert-level analysis fields
  proportionBalance     String?
  proportionScore       Int?
  fabricSynergy         String?
  fabricScore           Int?
  stylingSophistication String?
  sophisticationScore   Int?
  
  overallScore          Int?
  highlights            String[]
  improvementSuggestions String[]
  expertInsights        String[]
  technicalFlaws        String[]
  
  // Enhanced feedback storage
  userFeedback          String?           // User's detailed feedback
  feedbackRating        Int?              // 1-5 star rating
  accepted              Boolean?
  
  // Comparison data
  comparedWithIds       String[]
  comparisonInsight     String?
  
  // Guest tracking
  isGuest               Boolean           @default(false)
  createdAt             DateTime          @default(now())

  @@map("reviews")
  @@index([userId, createdAt])
  @@index([guestSessionId, createdAt])
}

// Track guest sessions and their usage limits
model GuestSession {
  id              String            @id @default(cuid())
  sessionId       String            @unique
  reviewCount     Int               @default(0)
  ipAddress       String?
  userAgent       String?
  lastUsedAt      DateTime          @default(now())
  createdAt       DateTime          @default(now())

  @@map("guest_sessions")
  @@index([sessionId])
  @@index([createdAt])
}
