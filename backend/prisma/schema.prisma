generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profile      Profile?
  reviews      Review[]

  @@map("users")
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  skinTone          String?
  build             String?
  faceStructure     String?
  hairType          String?
  height            Float?
  weight            Float?
  otherMeasurements Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Review {
  id                     String   @id @default(cuid())
  userId                 String?
  imageUrl               String
  imagePublicId          String?
  description            String?
  styleCategory          String?
  fit                    String?
  colorHarmony           String?
  occasionSuitability    String?
  highlights             String[]
  improvementSuggestions String[]
  comparedWithIds        String[]
  comparisonInsight      String?
  accepted               Boolean?
  createdAt              DateTime @default(now())
  colorHarmonyScore      Int?
  feedbackRating         Int?
  fitScore               Int?
  guestDeviceId          String?           // For guest users (device-based)
  isGuest                Boolean  @default(false)
  occasionScore          Int?
  overallScore           Int?
  styleCategoryScore     Int?
  userFeedback           String?
  expertInsights         String[]
  fabricScore            Int?
  fabricSynergy          String?
  proportionBalance      String?
  proportionScore        Int?
  sophisticationScore    Int?
  stylingSophistication  String?
  technicalFlaws         String[]
  user                   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([guestDeviceId, createdAt])
  @@index([isGuest, createdAt])
  @@map("reviews")
}

// Track guest devices and their usage limits (much more secure than sessions)
model GuestDevice {
  id                    String            @id @default(cuid())
  deviceId              String            @unique    // Secure device identifier
  deviceFingerprint     String            // Device characteristics hash
  reviewCount           Int               @default(0)
  
  // Device metadata for security and analytics
  platform              String?           // iOS/Android
  deviceName            String?           // User-set device name
  appVersion            String?           // App version
  osVersion             String?           // OS version
  
  // Network and security tracking
  ipAddress             String?           // Current IP
  ipAddresses           String[]          // Historical IPs for pattern detection
  userAgent             String?           // User agent string
  
  // Security flags
  isBlocked             Boolean           @default(false)
  riskScore             Int               @default(0)    // 0-100 risk assessment
  inconsistencyCount    Int               @default(0)    // Track device spoofing attempts
  
  // Usage tracking
  lastUsedAt            DateTime          @default(now())
  firstSeenAt           DateTime          @default(now())
  totalRequests         Int               @default(0)
  
  // Abuse detection
  rapidRequestCount     Int               @default(0)    // Requests in last minute
  dailyRequestCount     Int               @default(0)    // Requests today
  lastDailyReset        DateTime          @default(now())
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("guest_devices")
  @@index([deviceId])
  @@index([deviceFingerprint])
  @@index([createdAt])
  @@index([lastUsedAt])
  @@index([isBlocked])
  @@index([riskScore])
  @@index([ipAddress, createdAt])
}
